// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1alpha1.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QRCode_Version_FullMethodName  = "/api.v1alpha1.QRCode/version"
	QRCode_Generate_FullMethodName = "/api.v1alpha1.QRCode/generate"
)

// QRCodeClient is the client API for QRCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QRCodeClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	Generate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type qRCodeClient struct {
	cc grpc.ClientConnInterface
}

func NewQRCodeClient(cc grpc.ClientConnInterface) QRCodeClient {
	return &qRCodeClient{cc}
}

func (c *qRCodeClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, QRCode_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qRCodeClient) Generate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, QRCode_Generate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QRCodeServer is the server API for QRCode service.
// All implementations must embed UnimplementedQRCodeServer
// for forward compatibility
type QRCodeServer interface {
	Version(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	Generate(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedQRCodeServer()
}

// UnimplementedQRCodeServer must be embedded to have forward compatible implementations.
type UnimplementedQRCodeServer struct {
}

func (UnimplementedQRCodeServer) Version(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedQRCodeServer) Generate(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedQRCodeServer) mustEmbedUnimplementedQRCodeServer() {}

// UnsafeQRCodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QRCodeServer will
// result in compilation errors.
type UnsafeQRCodeServer interface {
	mustEmbedUnimplementedQRCodeServer()
}

func RegisterQRCodeServer(s grpc.ServiceRegistrar, srv QRCodeServer) {
	s.RegisterService(&QRCode_ServiceDesc, srv)
}

func _QRCode_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRCodeServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QRCode_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRCodeServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QRCode_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRCodeServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QRCode_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRCodeServer).Generate(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// QRCode_ServiceDesc is the grpc.ServiceDesc for QRCode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QRCode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha1.QRCode",
	HandlerType: (*QRCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "version",
			Handler:    _QRCode_Version_Handler,
		},
		{
			MethodName: "generate",
			Handler:    _QRCode_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha1.proto",
}
